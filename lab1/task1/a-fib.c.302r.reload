
;; Function main (main, funcdef_no=23, decl_uid=5027, cgraph_uid=24, symbol_order=23) (executed once)


********** Local #1: **********

	   Spilling non-eliminable hard regs: 31
New elimination table:
Can eliminate 65 to 31 (offset=64, prev_offset=0)
Can eliminate 65 to 29 (offset=48, prev_offset=0)
Can eliminate 64 to 31 (offset=16, prev_offset=0)
Can eliminate 64 to 29 (offset=0, prev_offset=0)
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=7: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=8,overall=22,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=9,overall=22,losers=2,rld_nregs=1
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 3:  (0) r  (1) Usw {*movdi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=7: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=8,overall=22,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=9,overall=22,losers=2,rld_nregs=1
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
          alt=12,overall=0,losers=0,rld_nregs=0
	 Choosing alt 12 in insn 11:  (0) r  (1) Ush {*movdi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
            alt=2,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 13:  (0) =rk  (1) %rk  (2) I {*adddi3_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 14:  (0) =r  (1) r  (2) S {add_losym_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 84:  (0) =r  (1) r {*movdi_aarch64}
            2 Scratch win: reject+=2
            2 Matched conflict early clobber reloads: reject--
          alt=0,overall=7,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 4:  (0) =m  (1) m  (2) =&r {stack_protect_set_di}
      Creating newreg=120 from oldreg=115, assigning class GENERAL_REGS to r120
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 15:  (1) Usf {*call_value_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=7: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=8,overall=22,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=9,overall=22,losers=2,rld_nregs=1
            alt=10: Bad operand -- refuse
            alt=11: Bad operand -- refuse
          alt=12,overall=0,losers=0,rld_nregs=0
	 Choosing alt 12 in insn 16:  (0) r  (1) Ush {*movdi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 17:  (0) =r  (1) r  (2) S {add_losym_di}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 19:  (0) =r  (1) r {*movdi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 18:  (0) r  (1) M {*movsi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 20:  (0) r  (1) M {*movsi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 21:  (1) Usf {*call_value_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 24:  (0) r  (1) M {*movsi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 25:  (0) =r  (1) r {*movdi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 26:  (0) r  (1) M {*movsi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 27:  (1) Usf {*call_value_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 30:  (0) r  (1) m {*movsi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 31:  (0) rk  (1) I {cmpsi}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 5:  (0) r  (1) M {*movsi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 6:  (0) =r  (1) r {*movsi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 7:  (0) r  (1) M {*movsi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 34:  (0) =r  (1) r {*movsi_aarch64}
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
            alt=0: Bad operand -- refuse
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 35:  (0) rk  (1) rk  (2) r {*addsi3_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 38:  (0) =r  (1) r {*movsi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 39:  (0) =r  (1) r {*movdi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 82:  (0) r  (1) M {*movsi_aarch64}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 41:  (1) Usf {*call_value_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
          alt=6,overall=0,losers=0,rld_nregs=0
	 Choosing alt 6 in insn 45:  (0) r  (1) m {*movsi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=0,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=1,overall=9,losers=1 -- refuse
            0 Non input pseudo reload: reject++
            alt=2,overall=7,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=3,overall=9,losers=1 -- refuse
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            alt=4,overall=9,losers=1 -- refuse
	 Choosing alt 0 in insn 42:  (0) =rk  (1) %rk  (2) I {*addsi3_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 43:  (0) =r  (1) r {*movsi_aarch64}
          alt=0,overall=0,losers=0,rld_nregs=0
	 Choosing alt 0 in insn 46:  (0) rk  (1) r {cmpsi}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
            alt=3: Bad operand -- refuse
            alt=4: Bad operand -- refuse
            alt=6: Bad operand -- refuse
            0 Non input pseudo reload: reject++
            alt=7: Bad operand -- refuse
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=8,overall=22,losers=2,rld_nregs=1
            0 Spill pseudo into memory: reject+=3
            Using memory insn operand 0: reject+=3
            0 Non input pseudo reload: reject++
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
          alt=9,overall=22,losers=2,rld_nregs=1
          alt=10,overall=0,losers=0,rld_nregs=0
	 Choosing alt 10 in insn 54:  (0) r  (1) Usw {*movdi_aarch64}
            2 Scratch win: reject+=2
            3 Scratch win: reject+=2
            2 Matched conflict early clobber reloads: reject--
          alt=0,overall=9,losers=1,rld_nregs=0
	 Choosing alt 0 in insn 55:  (0) m  (1) m  (2) =&r  (3) =&r {stack_protect_test_di}
      Creating newreg=121 from oldreg=116, assigning class GENERAL_REGS to r121
            0 Non-pseudo reload: reject+=2
            0 Non input pseudo reload: reject++
          alt=0,overall=9,losers=1,rld_nregs=1
          alt=1,overall=0,losers=0,rld_nregs=0
	 Choosing alt 1 in insn 57:  (0) Usf {*call_insn}
            1 Non-pseudo reload: reject+=2
            1 Non input pseudo reload: reject++
            Cycle danger: overall += LRA_MAX_REJECT
          alt=0,overall=609,losers=1,rld_nregs=1
            alt=1: Bad operand -- refuse
            alt=2: Bad operand -- refuse
          alt=3,overall=0,losers=0,rld_nregs=0
	 Choosing alt 3 in insn 60:  (0) r  (1) M {*movsi_aarch64}
	   Spilling non-eliminable hard regs: 31

********** Inheritance #1: **********

EBB 2 3
EBB 4
EBB 5
EBB 6
EBB 7

********** Pseudo live ranges #1: **********

  BB 6
   Insn 57: point = 0, n_alt = 1
  BB 7
   Insn 61: point = 0, n_alt = -1
   Insn 60: point = 0, n_alt = 3
  BB 5
   Insn 56: point = 0, n_alt = -1
   Insn 55: point = 0, n_alt = 0
   Insn 54: point = 2, n_alt = 10
  BB 4
   Insn 47: point = 3, n_alt = -1
   Insn 46: point = 3, n_alt = 0
   Insn 43: point = 4, n_alt = 0
   Insn 42: point = 6, n_alt = 0
   Insn 45: point = 7, n_alt = 6
   Insn 41: point = 8, n_alt = 1
   Insn 82: point = 8, n_alt = 3
   Insn 39: point = 8, n_alt = 0
   Insn 38: point = 8, n_alt = 0
   Insn 35: point = 8, n_alt = 1
   Insn 34: point = 10, n_alt = 0
  BB 3
   Insn 7: point = 12, n_alt = 3
   Insn 6: point = 13, n_alt = 0
   Insn 5: point = 14, n_alt = 3
  BB 2
   Insn 32: point = 16, n_alt = -1
   Insn 31: point = 16, n_alt = 1
   Insn 30: point = 17, n_alt = 6
   Insn 27: point = 18, n_alt = 1
   Insn 26: point = 18, n_alt = 3
   Insn 25: point = 18, n_alt = 0
   Insn 24: point = 18, n_alt = 3
   Insn 21: point = 18, n_alt = 1
   Insn 20: point = 18, n_alt = 3
   Insn 18: point = 18, n_alt = 3
   Insn 19: point = 18, n_alt = 0
   Insn 17: point = 18, n_alt = 0
   Insn 16: point = 20, n_alt = 12
   Insn 15: point = 21, n_alt = 1
   Insn 4: point = 21, n_alt = 0
   Insn 84: point = 23, n_alt = 0
   Insn 14: point = 25, n_alt = 0
   Insn 13: point = 26, n_alt = 0
   Insn 11: point = 26, n_alt = 12
   Insn 3: point = 27, n_alt = 10
 r93: [5..10]
 r94: [3..13]
 r95: [3..14]
 r97: [9..12] [3..4]
 r99: [22..23]
 r102: [25..26]
 r103: [3..18]
 r107: [16..17]
 r110: [3..7]
 r112: [1..2]
 r113: [19..20]
 r117: [0..1]
 r118: [24..27]
 r120: [21..22]
 r121: [0..1]
Compressing live ranges: from 28 to 18 - 64%
Ranges after the compression:
 r93: [5..8]
 r94: [3..8]
 r95: [3..8]
 r97: [7..8] [3..4]
 r99: [14..15]
 r102: [16..17]
 r103: [3..10]
 r107: [9..10]
 r110: [3..6]
 r112: [1..2]
 r113: [11..12]
 r117: [0..1]
 r118: [16..17]
 r120: [13..14]
 r121: [0..1]

********** Assignment #1: **********

	 Assigning to 120 (cl=GENERAL_REGS, orig=115, freq=110, tfirst=120, tfreq=110)...
	   Assign 3 to reload r120 (freq=110)
	 Assigning to 121 (cl=GENERAL_REGS, orig=116, freq=110, tfirst=121, tfreq=110)...
	   Assign 2 to reload r121 (freq=110)

********** Undoing inheritance #1: **********


********** Local #2: **********

	   Spilling non-eliminable hard regs: 31
	   Spilling non-eliminable hard regs: 31
New elimination table:
Can eliminate 65 to 31 (offset=64, prev_offset=64)
Can eliminate 65 to 29 (offset=48, prev_offset=0)
Can eliminate 64 to 31 (offset=16, prev_offset=16)
Can eliminate 64 to 29 (offset=0, prev_offset=0)
changing reg in insn 34
changing reg in insn 43
changing reg in insn 6
changing reg in insn 35
changing reg in insn 38
changing reg in insn 35
changing reg in insn 34
changing reg in insn 42
changing reg in insn 5
changing reg in insn 6
changing reg in insn 46
changing reg in insn 42
changing reg in insn 43
changing reg in insn 7
changing reg in insn 35
changing reg in insn 84
changing reg in insn 4
changing reg in insn 11
changing reg in insn 14
changing reg in insn 17
changing reg in insn 39
changing reg in insn 25
changing reg in insn 19
changing reg in insn 30
changing reg in insn 31
changing reg in insn 45
changing reg in insn 46
changing reg in insn 54
changing reg in insn 55
changing reg in insn 16
changing reg in insn 17
changing reg in insn 55
changing reg in insn 3
changing reg in insn 84
deleting insn with uid = 84.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 57.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 8 (    1)
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 9 (  1.1)


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 67 [vg] 68 [p0] 69 [p1] 70 [p2] 71 [p3] 72 [p4] 73 [p5] 74 [p6] 75 [p7] 76 [p8] 77 [p9] 78 [p10] 79 [p11] 80 [p12] 81 [p13] 82 [p14] 83 [p15] 84 [ffr] 85 [ffrt]
;;  hardware regs used 	 31 [sp]
;;  regular block artificial uses 	 31 [sp]
;;  eh block artificial uses 	 31 [sp] 65 [ap]
;;  entry block defs 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 68 [p0] 69 [p1] 70 [p2] 71 [p3]
;;  exit block uses 	 0 [x0] 31 [sp]
;;  regs ever live 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 16 [x16] 17 [x17] 19 [x19] 20 [x20] 21 [x21] 22 [x22] 30 [x30] 31 [sp] 66 [cc]
;;  ref usage 	r0={16d,10u} r1={12d,5u} r2={11d,4u} r3={7d} r4={6d} r5={6d} r6={6d} r7={6d} r8={6d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r16={10d} r17={10d} r18={5d} r19={2d,3u} r20={2d,3u} r21={1d,1u} r22={2d,4u} r30={6d} r31={1d,17u} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={2e} r66={8d,3u} r67={5d} r68={6d} r69={6d} r70={6d} r71={6d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} 
;;    total ref usage 437{385d,50u,2e} in 39{34 regular + 5 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 8 10 2 NOTE_INSN_FUNCTION_BEG)
(note 10 2 12 2 NOTE_INSN_DELETED)
(note 12 10 3 2 NOTE_INSN_DELETED)
(insn 3 12 11 2 (set (reg/f:DI 2 x2 [99])
        (const:DI (unspec:DI [
                    (symbol_ref:DI ("__stack_chk_guard") [flags 0xc0]  <var_decl 0x7749fe9ccb40 __stack_chk_guard>)
                    (const_int 0 [0])
                ] UNSPEC_SALT_ADDR))) "fib.c":7:12 65 {*movdi_aarch64}
     (expr_list:REG_EQUIV (const:DI (unspec:DI [
                    (symbol_ref:DI ("__stack_chk_guard") [flags 0xc0]  <var_decl 0x7749fe9ccb40 __stack_chk_guard>)
                    (const_int 0 [0])
                ] UNSPEC_SALT_ADDR))
        (nil)))
(insn 11 3 13 2 (set (reg/f:DI 0 x0 [102])
        (high:DI (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7749fe9ccbd0 *.LC0>))) "fib.c":12:5 65 {*movdi_aarch64}
     (expr_list:REG_EQUIV (high:DI (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7749fe9ccbd0 *.LC0>))
        (nil)))
(insn 13 11 14 2 (set (reg:DI 1 x1)
        (plus:DI (reg/f:DI 31 sp)
            (const_int 4 [0x4]))) "fib.c":12:5 157 {*adddi3_aarch64}
     (nil))
(insn 14 13 4 2 (set (reg:DI 0 x0)
        (lo_sum:DI (reg/f:DI 0 x0 [102])
            (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7749fe9ccbd0 *.LC0>))) "fib.c":12:5 1116 {add_losym_di}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7749fe9ccbd0 *.LC0>)
        (nil)))
(insn 4 14 15 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 31 sp)
                        (const_int 8 [0x8])) [2 D.5063+0 S8 A64])
                (unspec:DI [
                        (mem:DI (reg/f:DI 2 x2 [99]) [0  S8 A8])
                    ] UNSPEC_SP_SET))
            (set (reg:DI 3 x3 [115])
                (const_int 0 [0]))
        ]) "fib.c":7:12 1162 {stack_protect_set_di}
     (nil))
(call_insn 15 4 16 2 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7749feb2b000 scanf>) [0 __builtin_scanf S8 A8])
                    (const_int 0 [0])))
            (unspec:DI [
                    (const_int 0 [0])
                ] UNSPEC_CALLEE_ABI)
            (clobber (reg:DI 30 x30))
        ]) "fib.c":12:5 59 {*call_value_insn}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7749feb2b000 scanf>)
        (nil))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 16 15 17 2 (set (reg/f:DI 22 x22 [113])
        (high:DI (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>))) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 65 {*movdi_aarch64}
     (expr_list:REG_EQUIV (high:DI (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>))
        (nil)))
(insn 17 16 19 2 (set (reg/f:DI 22 x22 [103])
        (lo_sum:DI (reg/f:DI 22 x22 [113])
            (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>))) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 1116 {add_losym_di}
     (expr_list:REG_EQUIV (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>)
        (nil)))
(insn 19 17 18 2 (set (reg:DI 1 x1)
        (reg/f:DI 22 x22 [103])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 65 {*movdi_aarch64}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>)
        (nil)))
(insn 18 19 20 2 (set (reg:SI 2 x2)
        (const_int 0 [0])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(insn 20 18 21 2 (set (reg:SI 0 x0)
        (const_int 2 [0x2])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(call_insn 21 20 24 2 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>) [0 __builtin___printf_chk S8 A8])
                    (const_int 0 [0])))
            (unspec:DI [
                    (const_int 0 [0])
                ] UNSPEC_CALLEE_ABI)
            (clobber (reg:DI 30 x30))
        ]) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 59 {*call_value_insn}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>)
        (nil))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (nil)))))))
(insn 24 21 25 2 (set (reg:SI 2 x2)
        (const_int 1 [0x1])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(insn 25 24 26 2 (set (reg:DI 1 x1)
        (reg/f:DI 22 x22 [103])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 65 {*movdi_aarch64}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>)
        (nil)))
(insn 26 25 27 2 (set (reg:SI 0 x0)
        (const_int 2 [0x2])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(call_insn 27 26 30 2 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>) [0 __builtin___printf_chk S8 A8])
                    (const_int 0 [0])))
            (unspec:DI [
                    (const_int 0 [0])
                ] UNSPEC_CALLEE_ABI)
            (clobber (reg:DI 30 x30))
        ]) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 59 {*call_value_insn}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>)
        (nil))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (nil)))))))
(insn 30 27 31 2 (set (reg:SI 0 x0 [orig:107 n ] [107])
        (mem/c:SI (plus:DI (reg/f:DI 31 sp)
                (const_int 4 [0x4])) [1 n+0 S4 A32])) "fib.c":15:14 64 {*movsi_aarch64}
     (expr_list:REG_EQUIV (mem/c:SI (plus:DI (reg/f:DI 64 sfp)
                (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])
        (nil)))
(insn 31 30 32 2 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 0 x0 [orig:107 n ] [107])
            (const_int 1 [0x1]))) "fib.c":15:14 441 {cmpsi}
     (nil))
(jump_insn 32 31 63 2 (set (pc)
        (if_then_else (le (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "fib.c":15:14 15 {condjump}
     (int_list:REG_BR_PROB 118111604 (nil))
 -> 48)
(note 63 32 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 63 6 3 (set (reg/v:SI 20 x20 [orig:95 i ] [95])
        (const_int 1 [0x1])) "fib.c":11:7 64 {*movsi_aarch64}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 6 5 7 3 (set (reg/v:SI 19 x19 [orig:94 b ] [94])
        (reg/v:SI 20 x20 [orig:95 i ] [95])) "fib.c":10:7 64 {*movsi_aarch64}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 7 6 44 3 (set (reg/v:SI 0 x0 [orig:97 a ] [97])
        (const_int 0 [0])) "fib.c":9:7 64 {*movsi_aarch64}
     (expr_list:REG_EQUAL (const_int 0 [0])
        (nil)))
(code_label 44 7 33 4 3 (nil) [1 uses])
(note 33 44 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 4 (set (reg/v:SI 21 x21 [orig:93 b ] [93])
        (reg/v:SI 19 x19 [orig:94 b ] [94])) 64 {*movsi_aarch64}
     (nil))
(insn 35 34 38 4 (set (reg/v:SI 19 x19 [orig:94 b ] [94])
        (plus:SI (reg/v:SI 19 x19 [orig:94 b ] [94])
            (reg/v:SI 0 x0 [orig:97 a ] [97]))) "fib.c":17:11 156 {*addsi3_aarch64}
     (nil))
(insn 38 35 39 4 (set (reg:SI 2 x2)
        (reg/v:SI 19 x19 [orig:94 b ] [94])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(insn 39 38 82 4 (set (reg:DI 1 x1)
        (reg/f:DI 22 x22 [103])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 65 {*movdi_aarch64}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>)
        (nil)))
(insn 82 39 41 4 (set (reg:SI 0 x0)
        (const_int 2 [0x2])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(call_insn 41 82 45 4 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>) [0 __builtin___printf_chk S8 A8])
                    (const_int 0 [0])))
            (unspec:DI [
                    (const_int 0 [0])
                ] UNSPEC_CALLEE_ABI)
            (clobber (reg:DI 30 x30))
        ]) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 59 {*call_value_insn}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>)
        (nil))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (nil)))))))
(insn 45 41 42 4 (set (reg:SI 1 x1 [orig:110 n ] [110])
        (mem/c:SI (plus:DI (reg/f:DI 31 sp)
                (const_int 4 [0x4])) [1 n+0 S4 A32])) "fib.c":15:14 64 {*movsi_aarch64}
     (expr_list:REG_EQUIV (mem/c:SI (plus:DI (reg/f:DI 64 sfp)
                (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])
        (nil)))
(insn 42 45 43 4 (set (reg/v:SI 20 x20 [orig:95 i ] [95])
        (plus:SI (reg/v:SI 20 x20 [orig:95 i ] [95])
            (const_int 1 [0x1]))) "fib.c":20:11 156 {*addsi3_aarch64}
     (nil))
(insn 43 42 46 4 (set (reg/v:SI 0 x0 [orig:97 a ] [97])
        (reg/v:SI 21 x21 [orig:93 b ] [93])) 64 {*movsi_aarch64}
     (nil))
(insn 46 43 47 4 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 1 x1 [orig:110 n ] [110])
            (reg/v:SI 20 x20 [orig:95 i ] [95]))) "fib.c":15:14 441 {cmpsi}
     (nil))
(jump_insn 47 46 48 4 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) "fib.c":15:14 15 {condjump}
     (int_list:REG_BR_PROB 955630228 (nil))
 -> 44)
(code_label 48 47 49 5 2 (nil) [1 uses])
(note 49 48 54 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 54 49 55 5 (set (reg/f:DI 0 x0 [112])
        (const:DI (unspec:DI [
                    (symbol_ref:DI ("__stack_chk_guard") [flags 0xc0]  <var_decl 0x7749fe9ccb40 __stack_chk_guard>)
                    (const_int 1 [0x1])
                ] UNSPEC_SALT_ADDR))) "fib.c":23:1 65 {*movdi_aarch64}
     (expr_list:REG_EQUIV (const:DI (unspec:DI [
                    (symbol_ref:DI ("__stack_chk_guard") [flags 0xc0]  <var_decl 0x7749fe9ccb40 __stack_chk_guard>)
                    (const_int 1 [0x1])
                ] UNSPEC_SALT_ADDR))
        (nil)))
(insn 55 54 56 5 (parallel [
            (set (reg:CC 66 cc)
                (unspec:CC [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 31 sp)
                                (const_int 8 [0x8])) [2 D.5063+0 S8 A64])
                        (mem:DI (reg/f:DI 0 x0 [112]) [0  S8 A8])
                    ] UNSPEC_SP_TEST))
            (clobber (reg:DI 2 x2 [116]))
            (clobber (reg:DI 1 x1 [117]))
        ]) "fib.c":23:1 1164 {stack_protect_test_di}
     (nil))
(jump_insn 56 55 64 5 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) "fib.c":23:1 15 {condjump}
     (int_list:REG_BR_PROB 1073312332 (nil))
 -> 59)
(note 64 56 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 57 64 58 6 (parallel [
            (call (mem:DI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7749fe9c8e00 __stack_chk_fail>) [0 __stack_chk_fail S8 A8])
                (const_int 0 [0]))
            (unspec:DI [
                    (const_int 0 [0])
                ] UNSPEC_CALLEE_ABI)
            (clobber (reg:DI 30 x30))
        ]) "fib.c":23:1 58 {*call_insn}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7749fe9c8e00 __stack_chk_fail>)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(barrier 58 57 59)
(code_label 59 58 65 7 4 (nil) [1 uses])
(note 65 59 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 65 61 7 (set (reg/i:SI 0 x0)
        (const_int 0 [0])) "fib.c":23:1 64 {*movsi_aarch64}
     (nil))
(insn 61 60 83 7 (use (reg/i:SI 0 x0)) "fib.c":23:1 -1
     (nil))
(note 83 61 85 NOTE_INSN_DELETED)
(note 85 83 0 NOTE_INSN_DELETED)
