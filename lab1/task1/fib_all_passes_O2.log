*** IR Dump Before Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'fib_O2.ll'
source_filename = "fib.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @__isoc99_scanf(ptr nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nofree nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
*** IR Dump After Pre-ISel Intrinsic Lowering (pre-isel-intrinsic-lowering) ***
; ModuleID = 'fib_O2.ll'
source_filename = "fib.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-i128:128-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@.str = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.start.p0(i64 immarg, ptr nocapture) #1

; Function Attrs: nofree nounwind
declare noundef i32 @__isoc99_scanf(ptr nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nofree nounwind
declare noundef i32 @printf(ptr nocapture noundef readonly, ...) local_unnamed_addr #2

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: readwrite)
declare void @llvm.lifetime.end.p0(i64 immarg, ptr nocapture) #1

attributes #0 = { nofree nounwind uwtable "min-legal-vector-width"="0" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(argmem: readwrite) }
attributes #2 = { nofree nounwind "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cmov,+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1, !2, !3}
!llvm.ident = !{!4}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 8, !"PIC Level", i32 2}
!2 = !{i32 7, !"PIE Level", i32 2}
!3 = !{i32 7, !"uwtable", i32 2}
!4 = !{!"Ubuntu clang version 18.1.3 (1ubuntu1)"}
!5 = !{!6, !6, i64 0}
!6 = !{!"int", !7, i64 0}
!7 = !{!"omnipotent char", !8, i64 0}
!8 = !{!"Simple C/C++ TBAA"}
!9 = distinct !{!9, !10}
!10 = !{!"llvm.loop.mustprogress"}
*** IR Dump Before Expand large div/rem (expand-large-div-rem) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Expand large div/rem (expand-large-div-rem) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Expand large fp convert (expand-large-fp-convert) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Expand large fp convert (expand-large-fp-convert) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Expand Atomic instructions (atomic-expand) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Expand Atomic instructions (atomic-expand) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Lower AMX intrinsics (lower-amx-intrinsics) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Lower AMX type for load/store (lower-amx-type) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops (loop-simplify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %7, label %16

7:                                                ; preds = %7, %0
  %8 = phi i32 [ %10, %7 ], [ 0, %0 ]
  %9 = phi i32 [ %13, %7 ], [ 1, %0 ]
  %10 = phi i32 [ %11, %7 ], [ 1, %0 ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Canonicalize natural loops (loop-simplify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
.preheader:                                       ; preds = %0
  br label %7

; Loop:
7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

; Exit blocks
.loopexit:                                        ; preds = %7
  br label %16
*** IR Dump After Canonicalize Freeze Instructions in Loops (canon-freeze) ***
; Preheader:
.preheader:                                       ; preds = %0
  br label %7

; Loop:
7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

; Exit blocks
.loopexit:                                        ; preds = %7
  br label %16
*** IR Dump Before Loop Strength Reduction (loop-reduce) ***
; Preheader:
.preheader:                                       ; preds = %0
  br label %7

; Loop:
7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

; Exit blocks
.loopexit:                                        ; preds = %7
  br label %16
*** IR Dump After Loop Strength Reduction (loop-reduce) ***
; Preheader:
.preheader:                                       ; preds = %0
  br label %7

; Loop:
7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

; Exit blocks
.loopexit:                                        ; preds = %7
  br label %16
*** IR Dump Before Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp (mergeicmps) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores (expand-memcmp) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores (expand-memcmp) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions (gc-lowering) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering (shadow-stack-gc-lowering) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Lower constant intrinsics (lower-constant-intrinsics) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG (unreachableblockelim) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Constant Hoisting (consthoist) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Constant Hoisting (consthoist) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Replace intrinsics with calls to vector library (replace-with-veclib) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions (partially-inline-libcalls) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Expand vector predication intrinsics (expandvp) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Expand vector predication intrinsics (expandvp) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics (scalarize-masked-mem-intrin) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics (expand-reductions) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before TLS Variable Hoist (tlshoist) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After TLS Variable Hoist (tlshoist) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass (interleaved-access) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Interleaved Access Pass (interleaved-access) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After X86 Partial Reduction (x86-partial-reduction) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions (indirectbr-expand) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before CodeGen Prepare (codegenprepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %.loopexit, !llvm.loop !9

.loopexit:                                        ; preds = %7
  br label %16

16:                                               ; preds = %.loopexit, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After CodeGen Prepare (codegenprepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Exception handling preparation (dwarf-eh-prepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Exception handling preparation (dwarf-eh-prepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Prepare callbr (callbrprepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Prepare callbr (callbrprepare) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass (safe-stack) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump Before Module Verifier (verify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
*** IR Dump After Module Verifier (verify) ***
; Function Attrs: nofree nounwind uwtable
define dso_local noundef i32 @main() local_unnamed_addr #0 {
  %1 = alloca i32, align 4
  call void @llvm.lifetime.start.p0(i64 4, ptr nonnull %1) #3
  %2 = call i32 (ptr, ...) @__isoc99_scanf(ptr noundef nonnull @.str, ptr noundef nonnull %1)
  %3 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 0)
  %4 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef 1)
  %5 = load i32, ptr %1, align 4, !tbaa !5
  %6 = icmp sgt i32 %5, 1
  br i1 %6, label %.preheader, label %16

.preheader:                                       ; preds = %0
  br label %7

7:                                                ; preds = %.preheader, %7
  %8 = phi i32 [ %10, %7 ], [ 0, %.preheader ]
  %9 = phi i32 [ %13, %7 ], [ 1, %.preheader ]
  %10 = phi i32 [ %11, %7 ], [ 1, %.preheader ]
  %11 = add nsw i32 %8, %10
  %12 = call i32 (ptr, ...) @printf(ptr noundef nonnull dereferenceable(1) @.str.1, i32 noundef %11)
  %13 = add nuw nsw i32 %9, 1
  %14 = load i32, ptr %1, align 4, !tbaa !5
  %15 = icmp slt i32 %13, %14
  br i1 %15, label %7, label %16, !llvm.loop !9

16:                                               ; preds = %7, %0
  call void @llvm.lifetime.end.p0(i64 4, ptr nonnull %1) #3
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection (x86-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection (x86-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Argument Stack Rebase (x86argumentstackrebase) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Argument Stack Rebase (x86argumentstackrebase) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions (finalize-isel) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass (x86-domain-reassignment) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication (early-tailduplication) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs (opt-phis) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  LIFETIME_START %stack.0
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  LIFETIME_END %stack.0
  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  LIFETIME_START %stack.0
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  %5:gr64 = MOV32ri64 @.str
64B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
80B	  %7:gr8 = COPY %6.sub_8bit:gr32
96B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
112B	  $rdi = COPY %5:gr64
128B	  $rsi = COPY %8:gr64
144B	  $al = COPY %7:gr8
160B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %9:gr32 = COPY $eax
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  %10:gr64 = MOV32ri64 @.str.1
240B	  $rdi = COPY %10:gr64
256B	  $esi = COPY %6:gr32
272B	  $al = COPY %7:gr8
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %11:gr32 = COPY $eax
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  %12:gr32 = MOV32ri 1
368B	  $rdi = COPY %10:gr64
384B	  $esi = COPY %12:gr32
400B	  $al = COPY %7:gr8
416B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
448B	  %13:gr32 = COPY $eax
464B	  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
480B	  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
496B	  JCC_1 %bb.3, 12, implicit $eflags
512B	  JMP_1 %bb.1

528B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

544B	  %17:gr32 = MOV32ri 1
560B	  %16:gr32 = MOV32r0 implicit-def dead $eflags

576B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

592B	  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
608B	  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
624B	  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
640B	  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
672B	  %18:gr64 = MOV32ri64 @.str.1
688B	  %19:gr32 = MOV32r0 implicit-def dead $eflags
704B	  %20:gr8 = COPY %19.sub_8bit:gr32
720B	  $rdi = COPY %18:gr64
736B	  $esi = COPY %3:gr32
752B	  $al = COPY %20:gr8
768B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
800B	  %21:gr32 = COPY $eax
816B	  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
832B	  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
848B	  JCC_1 %bb.2, 12, implicit $eflags
864B	  JMP_1 %bb.3

880B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

896B	  LIFETIME_END %stack.0
912B	  %23:gr32 = MOV32r0 implicit-def dead $eflags
928B	  $eax = COPY %23:gr32
944B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  LIFETIME_START %stack.0
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
48B	  %5:gr64 = MOV32ri64 @.str
64B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
80B	  %7:gr8 = COPY %6.sub_8bit:gr32
96B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
112B	  $rdi = COPY %5:gr64
128B	  $rsi = COPY %8:gr64
144B	  $al = COPY %7:gr8
160B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
176B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %9:gr32 = COPY $eax
208B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
224B	  %10:gr64 = MOV32ri64 @.str.1
240B	  $rdi = COPY %10:gr64
256B	  $esi = COPY %6:gr32
272B	  $al = COPY %7:gr8
288B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
304B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
320B	  %11:gr32 = COPY $eax
336B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
352B	  %12:gr32 = MOV32ri 1
368B	  $rdi = COPY %10:gr64
384B	  $esi = COPY %12:gr32
400B	  $al = COPY %7:gr8
416B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
432B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
448B	  %13:gr32 = COPY $eax
464B	  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
480B	  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
496B	  JCC_1 %bb.3, 12, implicit $eflags
512B	  JMP_1 %bb.1

528B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

544B	  %17:gr32 = MOV32ri 1
560B	  %16:gr32 = MOV32r0 implicit-def dead $eflags

576B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

592B	  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
608B	  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
624B	  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
640B	  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
656B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
672B	  %18:gr64 = MOV32ri64 @.str.1
688B	  %19:gr32 = MOV32r0 implicit-def dead $eflags
704B	  %20:gr8 = COPY %19.sub_8bit:gr32
720B	  $rdi = COPY %18:gr64
736B	  $esi = COPY %3:gr32
752B	  $al = COPY %20:gr8
768B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
784B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
800B	  %21:gr32 = COPY $eax
816B	  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
832B	  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
848B	  JCC_1 %bb.2, 12, implicit $eflags
864B	  JMP_1 %bb.3

880B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

896B	  LIFETIME_END %stack.0
912B	  %23:gr32 = MOV32r0 implicit-def dead $eflags
928B	  $eax = COPY %23:gr32
944B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots (stack-coloring) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation (localstackalloc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %9:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %11:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %13:gr32 = COPY $eax
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion (early-ifcvt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner (machine-combiner) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion (x86-cmov-conversion) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %18:gr64 = MOV32ri64 @.str.1
  %19:gr32 = MOV32r0 implicit-def dead $eflags
  %20:gr8 = COPY %19.sub_8bit:gr32
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion (early-machinelicm) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags
  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %16.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %17:gr32 = MOV32ri 1
  %16:gr32 = MOV32r0 implicit-def dead $eflags
  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %16.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %16:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %17:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %17:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination (machine-cse) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking (machine-sink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = COPY %6:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = COPY %12:gr32
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %14:gr32 = MOV32rm %stack.0, 1, $noreg, 0, $noreg :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %15:gr32 = SUB32ri %14:gr32(tied-def 0), 2, implicit-def $eflags
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  %22:gr32 = SUB32rm %4:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  %23:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %23:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations (peephole-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions (dead-mi-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink (lrshrink) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Fixup SetCC (x86-fixup-setcc) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize (x86-optimize-LEAs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame (x86-cf-opt) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks (x86-avoid-SFB) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening (x86-slh) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering (x86-flags-copy-lowering) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Pre-configure (tilepreconfig) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Tile Register Pre-configure (tilepreconfig) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes (detect-dead-lanes) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions (processimpdefs) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks (unreachable-mbb-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY %5:gr64
  $rsi = COPY %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY %10:gr64
  $esi = MOV32ri 1
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis (livevars) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY killed %10:gr64
  $esi = MOV32ri 1
  $al = COPY killed %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr killed %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r killed %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit killed $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY killed %10:gr64
  $esi = MOV32ri 1
  $al = COPY killed %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = PHI %6:gr32, %bb.1, %2:gr32, %bb.2
  %1:gr32 = PHI %12:gr32, %bb.1, %4:gr32, %bb.2
  %2:gr32 = PHI %12:gr32, %bb.1, %3:gr32, %bb.2
  %3:gr32 = nsw ADD32rr killed %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r killed %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit killed $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation (phi-node-elimination) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY killed %10:gr64
  $esi = MOV32ri 1
  $al = COPY killed %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32
  %24:gr32 = COPY killed %6:gr32
  %25:gr32 = COPY %12:gr32
  %26:gr32 = COPY killed %12:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = COPY killed %26:gr32
  %1:gr32 = COPY killed %25:gr32
  %0:gr32 = COPY killed %24:gr32
  %3:gr32 = nsw ADD32rr killed %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r killed %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %24:gr32 = COPY killed %2:gr32
  %25:gr32 = COPY killed %4:gr32
  %26:gr32 = COPY killed %3:gr32
  JCC_1 %bb.2, 12, implicit killed $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY killed %10:gr64
  $esi = MOV32ri 1
  $al = COPY killed %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32
  %24:gr32 = COPY killed %6:gr32
  %25:gr32 = COPY %12:gr32
  %26:gr32 = COPY killed %12:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = COPY killed %26:gr32
  %1:gr32 = COPY killed %25:gr32
  %0:gr32 = COPY killed %24:gr32
  %3:gr32 = nsw ADD32rr killed %0:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = nuw nsw INC32r killed %1:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %24:gr32 = COPY killed %2:gr32
  %25:gr32 = COPY killed %4:gr32
  %26:gr32 = COPY killed %3:gr32
  JCC_1 %bb.2, 12, implicit killed $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass (twoaddressinstruction) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY killed %10:gr64
  $esi = MOV32ri 1
  $al = COPY killed %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32
  %24:gr32 = COPY killed %6:gr32
  %25:gr32 = COPY %12:gr32
  %26:gr32 = COPY killed %12:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = COPY killed %26:gr32
  %1:gr32 = COPY killed %25:gr32
  %0:gr32 = COPY killed %24:gr32
  %3:gr32 = COPY killed %0:gr32
  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY killed %1:gr32
  %4:gr32 = nuw nsw INC32r %4:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %24:gr32 = COPY killed %2:gr32
  %25:gr32 = COPY killed %4:gr32
  %26:gr32 = COPY killed %3:gr32
  JCC_1 %bb.2, 12, implicit killed $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %5:gr64 = MOV32ri64 @.str
  %6:gr32 = MOV32r0 implicit-def dead $eflags
  %7:gr8 = COPY %6.sub_8bit:gr32
  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = COPY killed %5:gr64
  $rsi = COPY killed %8:gr64
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %10:gr64 = MOV32ri64 @.str.1
  $rdi = COPY %10:gr64
  $esi = MOV32r0 implicit-def dead $eflags
  $al = COPY %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %12:gr32 = MOV32ri 1
  $rdi = COPY killed %10:gr64
  $esi = MOV32ri 1
  $al = COPY killed %7:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit killed $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)

  %18:gr64 = MOV32ri64 @.str.1
  %20:gr8 = COPY %6.sub_8bit:gr32
  %24:gr32 = COPY killed %6:gr32
  %25:gr32 = COPY %12:gr32
  %26:gr32 = COPY killed %12:gr32

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %2:gr32 = COPY killed %26:gr32
  %1:gr32 = COPY killed %25:gr32
  %0:gr32 = COPY killed %24:gr32
  %3:gr32 = COPY killed %0:gr32
  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = COPY %18:gr64
  $esi = COPY %3:gr32
  $al = COPY %20:gr8
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY killed %1:gr32
  %4:gr32 = nuw nsw INC32r %4:gr32(tied-def 0), implicit-def dead $eflags
  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  %24:gr32 = COPY killed %2:gr32
  %25:gr32 = COPY killed %4:gr32
  %26:gr32 = COPY killed %3:gr32
  JCC_1 %bb.2, 12, implicit killed $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering (slotindexes) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  %5:gr64 = MOV32ri64 @.str
48B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
64B	  %7:gr8 = COPY %6.sub_8bit:gr32
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = COPY killed %5:gr64
112B	  $rsi = COPY killed %8:gr64
128B	  $al = COPY %7:gr8
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %10:gr64 = MOV32ri64 @.str.1
208B	  $rdi = COPY %10:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $al = COPY %7:gr8
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %12:gr32 = MOV32ri 1
320B	  $rdi = COPY killed %10:gr64
336B	  $esi = MOV32ri 1
352B	  $al = COPY killed %7:gr8
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit killed $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

464B	  %18:gr64 = MOV32ri64 @.str.1
480B	  %20:gr8 = COPY %6.sub_8bit:gr32
496B	  %24:gr32 = COPY killed %6:gr32
512B	  %25:gr32 = COPY %12:gr32
528B	  %26:gr32 = COPY killed %12:gr32

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

560B	  %2:gr32 = COPY killed %26:gr32
576B	  %1:gr32 = COPY killed %25:gr32
592B	  %0:gr32 = COPY killed %24:gr32
608B	  %3:gr32 = COPY killed %0:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %18:gr64
672B	  $esi = COPY %3:gr32
688B	  $al = COPY %20:gr8
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
736B	  %4:gr32 = COPY killed %1:gr32
752B	  %4:gr32 = nuw nsw INC32r %4:gr32(tied-def 0), implicit-def dead $eflags
768B	  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
784B	  %24:gr32 = COPY killed %2:gr32
800B	  %25:gr32 = COPY killed %4:gr32
816B	  %26:gr32 = COPY killed %3:gr32
832B	  JCC_1 %bb.2, 12, implicit killed $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  %5:gr64 = MOV32ri64 @.str
48B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
64B	  %7:gr8 = COPY %6.sub_8bit:gr32
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = COPY killed %5:gr64
112B	  $rsi = COPY killed %8:gr64
128B	  $al = COPY %7:gr8
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %10:gr64 = MOV32ri64 @.str.1
208B	  $rdi = COPY %10:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $al = COPY %7:gr8
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %12:gr32 = MOV32ri 1
320B	  $rdi = COPY killed %10:gr64
336B	  $esi = MOV32ri 1
352B	  $al = COPY killed %7:gr8
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit killed $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

464B	  %18:gr64 = MOV32ri64 @.str.1
480B	  %20:gr8 = COPY %6.sub_8bit:gr32
496B	  %24:gr32 = COPY killed %6:gr32
512B	  %25:gr32 = COPY %12:gr32
528B	  %26:gr32 = COPY killed %12:gr32

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

560B	  %2:gr32 = COPY killed %26:gr32
576B	  %1:gr32 = COPY killed %25:gr32
592B	  %0:gr32 = COPY killed %24:gr32
608B	  %3:gr32 = COPY killed %0:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %18:gr64
672B	  $esi = COPY %3:gr32
688B	  $al = COPY %20:gr8
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
736B	  %4:gr32 = COPY killed %1:gr32
752B	  %4:gr32 = nuw nsw INC32r %4:gr32(tied-def 0), implicit-def dead $eflags
768B	  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
784B	  %24:gr32 = COPY killed %2:gr32
800B	  %25:gr32 = COPY killed %4:gr32
816B	  %26:gr32 = COPY killed %3:gr32
832B	  JCC_1 %bb.2, 12, implicit killed $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis (liveintervals) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  %5:gr64 = MOV32ri64 @.str
48B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
64B	  %7:gr8 = COPY %6.sub_8bit:gr32
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = COPY %5:gr64
112B	  $rsi = COPY %8:gr64
128B	  $al = COPY %7:gr8
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %10:gr64 = MOV32ri64 @.str.1
208B	  $rdi = COPY %10:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $al = COPY %7:gr8
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %12:gr32 = MOV32ri 1
320B	  $rdi = COPY %10:gr64
336B	  $esi = MOV32ri 1
352B	  $al = COPY %7:gr8
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit killed $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

464B	  %18:gr64 = MOV32ri64 @.str.1
480B	  %20:gr8 = COPY %6.sub_8bit:gr32
496B	  %24:gr32 = COPY %6:gr32
512B	  %25:gr32 = COPY %12:gr32
528B	  %26:gr32 = COPY %12:gr32

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

560B	  %2:gr32 = COPY %26:gr32
576B	  %1:gr32 = COPY %25:gr32
592B	  %0:gr32 = COPY %24:gr32
608B	  %3:gr32 = COPY %0:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %18:gr64
672B	  $esi = COPY %3:gr32
688B	  $al = COPY %20:gr8
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
736B	  %4:gr32 = COPY %1:gr32
752B	  %4:gr32 = nuw nsw INC32r %4:gr32(tied-def 0), implicit-def dead $eflags
768B	  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
784B	  %24:gr32 = COPY %2:gr32
800B	  %25:gr32 = COPY %4:gr32
816B	  %26:gr32 = COPY %3:gr32
832B	  JCC_1 %bb.2, 12, implicit killed $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Register Coalescer (register-coalescer) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
32B	  %5:gr64 = MOV32ri64 @.str
48B	  %6:gr32 = MOV32r0 implicit-def dead $eflags
64B	  %7:gr8 = COPY %6.sub_8bit:gr32
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = COPY %5:gr64
112B	  $rsi = COPY %8:gr64
128B	  $al = COPY %7:gr8
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
192B	  %10:gr64 = MOV32ri64 @.str.1
208B	  $rdi = COPY %10:gr64
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  $al = COPY %7:gr8
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %12:gr32 = MOV32ri 1
320B	  $rdi = COPY %10:gr64
336B	  $esi = MOV32ri 1
352B	  $al = COPY %7:gr8
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit killed $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

464B	  %18:gr64 = MOV32ri64 @.str.1
480B	  %20:gr8 = COPY %6.sub_8bit:gr32
496B	  %24:gr32 = COPY %6:gr32
512B	  %25:gr32 = COPY %12:gr32
528B	  %26:gr32 = COPY %12:gr32

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

560B	  %2:gr32 = COPY %26:gr32
576B	  %1:gr32 = COPY %25:gr32
592B	  %0:gr32 = COPY %24:gr32
608B	  %3:gr32 = COPY %0:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %2:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = COPY %18:gr64
672B	  $esi = COPY %3:gr32
688B	  $al = COPY %20:gr8
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
736B	  %4:gr32 = COPY %1:gr32
752B	  %4:gr32 = nuw nsw INC32r %4:gr32(tied-def 0), implicit-def dead $eflags
768B	  CMP32rm %4:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
784B	  %24:gr32 = COPY %2:gr32
800B	  %25:gr32 = COPY %4:gr32
816B	  %26:gr32 = COPY %3:gr32
832B	  JCC_1 %bb.2, 12, implicit killed $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Register Coalescer (register-coalescer) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit killed $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
768B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
832B	  JCC_1 %bb.2, 12, implicit killed $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit killed $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
768B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
832B	  JCC_1 %bb.2, 12, implicit killed $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components (rename-independent-subregs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit killed $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
768B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
832B	  JCC_1 %bb.2, 12, implicit killed $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit killed $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
768B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
832B	  JCC_1 %bb.2, 12, implicit killed $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler (machine-scheduler) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis (livedebugvars) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis (livestacks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map (virtregmap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix (liveregmatrix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Tile Register Configure (tileconfig) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $rsi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit killed $esi, implicit killed $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
824B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
832B	  JCC_1 %bb.2, 12, implicit $eflags
848B	  JMP_1 %bb.3

864B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

880B	  $eax = MOV32r0 implicit-def dead $eflags
896B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator (greedy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
832B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
848B	  JCC_1 %bb.2, 12, implicit $eflags
864B	  JMP_1 %bb.3

880B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

896B	  $eax = MOV32r0 implicit-def dead $eflags
912B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  %8:gr64 = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
112B	  $rsi = COPY %8:gr64
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  %25:gr32 = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)

496B	  %24:gr32 = MOV32r0 implicit-def dead $eflags
528B	  %26:gr32 = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

608B	  %3:gr32 = COPY %24:gr32
624B	  %3:gr32 = nsw ADD32rr %3:gr32(tied-def 0), %26:gr32, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY %3:gr32
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  %25:gr32 = nuw nsw INC32r %25:gr32(tied-def 0), implicit-def dead $eflags
784B	  %24:gr32 = COPY %26:gr32
816B	  %26:gr32 = COPY %3:gr32
832B	  CMP32rm %25:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
848B	  JCC_1 %bb.2, 12, implicit $eflags
864B	  JMP_1 %bb.3

880B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

896B	  $eax = MOV32r0 implicit-def dead $eflags
912B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter (virtregrewriter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $ebp = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)
	  liveins: $ebp
496B	  renamable $eax = MOV32r0 implicit-def dead $eflags
528B	  renamable $r14d = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
	  liveins: $eax, $ebp, $r14d
608B	  renamable $ebx = COPY killed renamable $eax
624B	  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY renamable $ebx
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
784B	  renamable $eax = COPY killed renamable $r14d
816B	  renamable $r14d = COPY killed renamable $ebx
832B	  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
848B	  JCC_1 %bb.2, 12, implicit $eflags
864B	  JMP_1 %bb.3

880B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

896B	  $eax = MOV32r0 implicit-def dead $eflags
912B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $ebp = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)
	  liveins: $ebp
496B	  renamable $eax = MOV32r0 implicit-def dead $eflags
528B	  renamable $r14d = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
	  liveins: $eax, $ebp, $r14d
608B	  renamable $ebx = COPY killed renamable $eax
624B	  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY renamable $ebx
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
784B	  renamable $eax = COPY killed renamable $r14d
816B	  renamable $r14d = COPY killed renamable $ebx
832B	  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
848B	  JCC_1 %bb.2, 12, implicit $eflags
864B	  JMP_1 %bb.3

880B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

896B	  $eax = MOV32r0 implicit-def dead $eflags
912B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Register Allocation Pass Scoring (regallocscoringpass) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $ebp = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)
	  liveins: $ebp
496B	  renamable $eax = MOV32r0 implicit-def dead $eflags
528B	  renamable $r14d = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
	  liveins: $eax, $ebp, $r14d
608B	  renamable $ebx = COPY killed renamable $eax
624B	  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY renamable $ebx
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
784B	  renamable $eax = COPY killed renamable $r14d
816B	  renamable $r14d = COPY killed renamable $ebx
832B	  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
848B	  JCC_1 %bb.2, 12, implicit $eflags
864B	  JMP_1 %bb.3

880B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

896B	  $eax = MOV32r0 implicit-def dead $eflags
912B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $ebp = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)
	  liveins: $ebp
496B	  renamable $eax = MOV32r0 implicit-def dead $eflags
528B	  renamable $r14d = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
	  liveins: $eax, $ebp, $r14d
608B	  renamable $ebx = COPY killed renamable $eax
624B	  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY renamable $ebx
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
784B	  renamable $eax = COPY killed renamable $r14d
816B	  renamable $r14d = COPY killed renamable $ebx
832B	  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
848B	  JCC_1 %bb.2, 12, implicit $eflags
864B	  JMP_1 %bb.3

880B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

896B	  $eax = MOV32r0 implicit-def dead $eflags
912B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring (stack-slot-coloring) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $ebp = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)
	  liveins: $ebp
496B	  renamable $eax = MOV32r0 implicit-def dead $eflags
528B	  renamable $r14d = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
	  liveins: $eax, $ebp, $r14d
608B	  renamable $ebx = COPY killed renamable $eax
624B	  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY renamable $ebx
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
784B	  renamable $eax = COPY killed renamable $r14d
816B	  renamable $r14d = COPY killed renamable $ebx
832B	  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
848B	  JCC_1 %bb.2, 12, implicit $eflags
864B	  JMP_1 %bb.3

880B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

896B	  $eax = MOV32r0 implicit-def dead $eflags
912B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

16B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
80B	  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
96B	  $rdi = MOV32ri64 @.str
128B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
144B	  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
176B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
208B	  $rdi = MOV32ri64 @.str.1
224B	  $esi = MOV32r0 implicit-def dead $eflags
240B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
256B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
272B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
288B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
304B	  renamable $ebp = MOV32ri 1
320B	  $rdi = MOV32ri64 @.str.1
336B	  $esi = MOV32ri 1
352B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
368B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
384B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
400B	  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
416B	  JCC_1 %bb.3, 12, implicit $eflags
432B	  JMP_1 %bb.1

448B	bb.1..preheader:
	; predecessors: %bb.0
	  successors: %bb.2(0x80000000); %bb.2(100.00%)
	  liveins: $ebp
496B	  renamable $eax = MOV32r0 implicit-def dead $eflags
528B	  renamable $r14d = MOV32ri 1

544B	bb.2 (%ir-block.7):
	; predecessors: %bb.1, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
	  liveins: $eax, $ebp, $r14d
608B	  renamable $ebx = COPY killed renamable $eax
624B	  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
640B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
656B	  $rdi = MOV32ri64 @.str.1
672B	  $esi = COPY renamable $ebx
688B	  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
704B	  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
720B	  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
752B	  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
784B	  renamable $eax = COPY killed renamable $r14d
816B	  renamable $r14d = COPY killed renamable $ebx
832B	  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
848B	  JCC_1 %bb.2, 12, implicit $eflags
864B	  JMP_1 %bb.3

880B	bb.3 (%ir-block.16):
	; predecessors: %bb.0, %bb.2

896B	  $eax = MOV32r0 implicit-def dead $eflags
912B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion (machinelicm) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Lower Tile Copy (lowertilecopy) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier (x86-codegen) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Load Hardening (x86-lvi-load) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove Redundant DEBUG_VALUE analysis (removeredundantdebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Fixup Statepoint Caller Saved (fixup-statepoint-caller-saved) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink (postra-machine-sink) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis (shrink-wrap) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)

  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $rsi = LEA64r %stack.0, 1, $noreg, 0, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  CMP32mi %stack.0, 1, $noreg, 0, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  ADJCALLSTACKUP64 0, 0, implicit-def dead $rsp, implicit-def dead $eflags, implicit-def dead $ssp, implicit $rsp, implicit $ssp
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization (prologepilog) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Late Instructions Cleanup Pass (machine-latecleanup) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Late Instructions Cleanup Pass (machine-latecleanup) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags
  JMP_1 %bb.1

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags
  JMP_1 %bb.3

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer (branch-folder) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication (tailduplication) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass (machine-cp) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $rdi = MOV32ri64 @.str
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32r0 implicit-def dead $eflags
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $rdi = MOV32ri64 @.str.1
  $esi = MOV32ri 1
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = MOV32r0 implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  renamable $ebx = COPY killed renamable $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $rdi = MOV32ri64 @.str.1
  $esi = COPY renamable $ebx
  dead $eax = MOV32r0 implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  renamable $eax = COPY killed renamable $r14d
  renamable $r14d = COPY killed renamable $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass (postrapseudos) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass (x86-pseudo) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Insert KCFI indirect call checks (kcfi) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Insert KCFI indirect call checks (kcfi) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler (post-RA-sched) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection (gc-analysis) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement (block-placement) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls (fentry-insert) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops (xray-instrumentation) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute (patchable-function) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix (x86-execution-domain-fix) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps (break-false-deps) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup (x86-fixup-bw-insts) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup (x86-fixup-LEAs) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs when possible (x86-compress-evex) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs when possible (x86-compress-evex) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets (funclet-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis (stackmap-liveness) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis (livedebugvalues) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Machine Sanitizer Binary Metadata (machine-sanmd) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Machine Sanitizer Binary Metadata (machine-sanmd) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Stack Frame Layout Analysis (stack-frame-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Stack Frame Layout Analysis (stack-frame-layout) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After X86 Speculative Execution Side Effect Suppression (x86-seses) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before X86 Return Thunks (x86-return-thunks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After X86 Return Thunks (x86-return-thunks) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed (cfi-instr-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After X86 Load Value Injection (LVI) Ret-Hardening (x86-lvi-ret) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Pseudo Probe Inserter (pseudo-probe-inserter) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump Before Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

# *** IR Dump After Unpack machine instruction bundles (unpack-mi-bundles) ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs, TiedOpsRewritten, TracksDebugUserValues
Frame Objects:
  fi#-3: size=8, align=16, fixed, at location [SP-24]
  fi#-2: size=8, align=8, fixed, at location [SP-16]
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]

bb.0 (%ir-block.0):
  successors: %bb.1(0x40000000), %bb.3(0x40000000); %bb.1(50.00%), %bb.3(50.00%)
  liveins: $rbp, $r14, $rbx
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 16
  frame-setup PUSH64r killed $r14, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 24
  frame-setup PUSH64r killed $rbx, implicit-def $rsp, implicit $rsp
  frame-setup CFI_INSTRUCTION def_cfa_offset 32
  $rsp = frame-setup SUB64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-setup CFI_INSTRUCTION def_cfa_offset 48
  CFI_INSTRUCTION offset $rbx, -32
  CFI_INSTRUCTION offset $r14, -24
  CFI_INSTRUCTION offset $rbp, -16
  renamable $rsi = LEA64r $rsp, 1, $noreg, 12, $noreg
  $edi = MOV32ri @.str, implicit-def $rdi
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @__isoc99_scanf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $rsi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = XOR32rr undef $esi(tied-def 0), undef $esi, implicit-def dead $eflags
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = MOV32ri 1
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32ri 1
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  CMP32mi $rsp, 1, $noreg, 12, $noreg, 2, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.3, 12, implicit $eflags

bb.1..preheader:
; predecessors: %bb.0
  successors: %bb.2(0x80000000); %bb.2(100.00%)
  liveins: $ebp
  renamable $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  renamable $r14d = MOV32ri 1

bb.2 (%ir-block.7, align 16):
; predecessors: %bb.1, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)
  liveins: $eax, $ebp, $r14d
  $ebx = MOV32rr killed $eax
  renamable $ebx = nsw ADD32rr killed renamable $ebx(tied-def 0), renamable $r14d, implicit-def dead $eflags
  $edi = MOV32ri @.str.1, implicit-def $rdi
  $esi = MOV32rr $ebx
  dead $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags, implicit-def $al
  CALL64pcrel32 target-flags(x86-plt) @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $rdi, implicit $esi, implicit $al, implicit-def $rsp, implicit-def $ssp, implicit-def dead $eax
  renamable $ebp = nuw nsw INC32r killed renamable $ebp(tied-def 0), implicit-def dead $eflags
  $eax = MOV32rr killed $r14d
  $r14d = MOV32rr killed $ebx
  CMP32rm renamable $ebp, $rsp, 1, $noreg, 12, $noreg, implicit-def $eflags :: (dereferenceable load (s32) from %ir.1, !tbaa !5)
  JCC_1 %bb.2, 12, implicit $eflags

bb.3 (%ir-block.16):
; predecessors: %bb.0, %bb.2

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri32 $rsp(tied-def 0), 16, implicit-def dead $eflags
  frame-destroy CFI_INSTRUCTION def_cfa_offset 32
  $rbx = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 24
  $r14 = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 16
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  frame-destroy CFI_INSTRUCTION def_cfa_offset 8
  RET64 $eax

# End machine code for function main.

