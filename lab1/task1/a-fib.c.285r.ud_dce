
;; Function main (main, funcdef_no=23, decl_uid=5027, cgraph_uid=24, symbol_order=23) (executed once)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue: n_basic_blocks 8 n_edges 9 count 9 (  1.1)


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 67 [vg] 68 [p0] 69 [p1] 70 [p2] 71 [p3] 72 [p4] 73 [p5] 74 [p6] 75 [p7] 76 [p8] 77 [p9] 78 [p10] 79 [p11] 80 [p12] 81 [p13] 82 [p14] 83 [p15] 84 [ffr] 85 [ffrt]
;;  hardware regs used 	 31 [sp] 64 [sfp] 65 [ap]
;;  regular block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  eh block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  entry block defs 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap] 68 [p0] 69 [p1] 70 [p2] 71 [p3]
;;  exit block uses 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;;  regs ever live 	 0 [x0] 1 [x1] 2 [x2] 16 [x16] 17 [x17] 30 [x30] 31 [sp] 66 [cc]
;;  ref usage 	r0={11d,6u} r1={10d,4u} r2={9d,3u} r3={6d} r4={6d} r5={6d} r6={6d} r7={6d} r8={6d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r16={10d} r17={10d} r18={5d} r29={1d,7u} r30={6d} r31={1d,12u} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={1d,12u,1e} r65={1d,6u} r66={8d,3u} r67={5d} r68={6d} r69={6d} r70={6d} r71={6d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r93={1d,1u} r94={2d,3u} r95={2d,3u} r97={2d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,3u} r107={1d,1u} r110={1d,1u} r112={1d,1u} r113={1d,1u} 
;;    total ref usage 460{387d,72u,1e} in 41{36 regular + 5 call} insns.
;; Reaching defs:
;;  sparse invalidated 	
;;  dense invalidated 	
;;  reg->defs[] map:	0[0,10] 1[11,20] 2[21,29] 3[30,35] 4[36,41] 5[42,47] 6[48,53] 7[54,59] 8[60,65] 9[66,70] 10[71,75] 11[76,80] 12[81,85] 13[86,90] 14[91,95] 15[96,100] 16[101,110] 17[111,120] 18[121,125] 29[126,126] 30[127,132] 31[133,133] 32[134,139] 33[140,145] 34[146,151] 35[152,157] 36[158,163] 37[164,169] 38[170,175] 39[176,181] 48[182,186] 49[187,191] 50[192,196] 51[197,201] 52[202,206] 53[207,211] 54[212,216] 55[217,221] 56[222,226] 57[227,231] 58[232,236] 59[237,241] 60[242,246] 61[247,251] 62[252,256] 63[257,261] 64[262,262] 65[263,263] 66[264,271] 67[272,276] 68[277,282] 69[283,288] 70[289,294] 71[295,300] 72[301,305] 73[306,310] 74[311,315] 75[316,320] 76[321,325] 77[326,330] 78[331,335] 79[336,340] 80[341,345] 81[346,350] 82[351,355] 83[356,360] 84[361,365] 85[366,370] 93[371,371] 94[372,373] 95[374,375] 97[376,377] 99[378,378] 100[379,379] 101[380,380] 102[381,381] 103[382,382] 107[383,383] 110[384,384] 112[385,385] 113[386,386] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d10(0){ }d20(1){ }d29(2){ }d35(3){ }d41(4){ }d47(5){ }d53(6){ }d59(7){ }d65(8){ }d126(29){ }d132(30){ }d133(31){ }d139(32){ }d145(33){ }d151(34){ }d157(35){ }d163(36){ }d169(37){ }d175(38){ }d181(39){ }d262(64){ }d263(65){ }d282(68){ }d288(69){ }d294(70){ }d300(71){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap] 68 [p0] 69 [p1] 70 [p2] 71 [p3]
;; live  in  	
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap] 68 [p0] 69 [p1] 70 [p2] 71 [p3]
;; live  kill	
;; rd  in  	(0) 
;; rd  gen 	(26) 0[10],1[20],2[29],3[35],4[41],5[47],6[53],7[59],8[65],29[126],30[132],31[133],32[139],33[145],34[151],35[157],36[163],37[169],38[175],39[181],64[262],65[263],68[282],69[288],70[294],71[300]
;; rd  kill	(148) 0[0,1,2,3,4,5,6,7,8,9,10],1[11,12,13,14,15,16,17,18,19,20],2[21,22,23,24,25,26,27,28,29],3[30,31,32,33,34,35],4[36,37,38,39,40,41],5[42,43,44,45,46,47],6[48,49,50,51,52,53],7[54,55,56,57,58,59],8[60,61,62,63,64,65],29[126],30[127,128,129,130,131,132],31[133],32[134,135,136,137,138,139],33[140,141,142,143,144,145],34[146,147,148,149,150,151],35[152,153,154,155,156,157],36[158,159,160,161,162,163],37[164,165,166,167,168,169],38[170,171,172,173,174,175],39[176,177,178,179,180,181],64[262],65[263],68[277,278,279,280,281,282],69[283,284,285,286,287,288],70[289,290,291,292,293,294],71[295,296,297,298,299,300]
;;  UD chains for artificial uses at top
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; rd  out 	(4) 29[126],31[133],64[262],65[263]
;;  UD chains for artificial uses at bottom

( 0 )->[2]->( 3 5 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(29){ d126(bb 0 insn -1) }u-1(31){ d133(bb 0 insn -1) }u-1(64){ d262(bb 0 insn -1) }u-1(65){ d263(bb 0 insn -1) }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 67 [vg] 68 [p0] 69 [p1] 70 [p2] 71 [p3] 72 [p4] 73 [p5] 74 [p6] 75 [p7] 76 [p8] 77 [p9] 78 [p10] 79 [p11] 80 [p12] 81 [p13] 82 [p14] 83 [p15] 84 [ffr] 85 [ffrt] 99 100 101 102 103 107 113
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 99 100 101 102 103 107 113
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; rd  in  	(4) 29[126],31[133],64[262],65[263]
;; rd  gen 	(9) 0[4],66[268],99[378],100[379],101[380],102[381],103[382],107[383],113[386]
;; rd  kill	(32) 0[0,1,2,3,4,5,6,7,8,9,10],30[127,128,129,130,131,132],66[264,265,266,267,268,269,270,271],99[378],100[379],101[380],102[381],103[382],107[383],113[386]
;;  UD chains for artificial uses at top
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 103
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 103
;; rd  out 	(5) 29[126],31[133],64[262],65[263],103[382]
;;  UD chains for artificial uses at bottom
;;   reg 29 { d126(bb 0 insn -1) }
;;   reg 31 { d133(bb 0 insn -1) }
;;   reg 64 { d262(bb 0 insn -1) }
;;   reg 65 { d263(bb 0 insn -1) }

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(29){ d126(bb 0 insn -1) }u-1(31){ d133(bb 0 insn -1) }u-1(64){ d262(bb 0 insn -1) }u-1(65){ d263(bb 0 insn -1) }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 103
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 94 95 97
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 103
;; live  gen 	 94 95 97
;; live  kill	
;; rd  in  	(5) 29[126],31[133],64[262],65[263],103[382]
;; rd  gen 	(3) 94[372],95[375],97[377]
;; rd  kill	(6) 94[372,373],95[374,375],97[376,377]
;;  UD chains for artificial uses at top
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 94 95 97 103
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 94 95 97 103
;; rd  out 	(8) 29[126],31[133],64[262],65[263],94[372],95[375],97[377],103[382]
;;  UD chains for artificial uses at bottom
;;   reg 29 { d126(bb 0 insn -1) }
;;   reg 31 { d133(bb 0 insn -1) }
;;   reg 64 { d262(bb 0 insn -1) }
;;   reg 65 { d263(bb 0 insn -1) }

( 4 3 )->[4]->( 4 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(29){ d126(bb 0 insn -1) }u-1(31){ d133(bb 0 insn -1) }u-1(64){ d262(bb 0 insn -1) }u-1(65){ d263(bb 0 insn -1) }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 94 95 97 103
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 94 95 97 103
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 67 [vg] 68 [p0] 69 [p1] 70 [p2] 71 [p3] 72 [p4] 73 [p5] 74 [p6] 75 [p7] 76 [p8] 77 [p9] 78 [p10] 79 [p11] 80 [p12] 81 [p13] 82 [p14] 83 [p15] 84 [ffr] 85 [ffrt] 93 94 95 97 110
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 94 95 97 103
;; live  gen 	 0 [x0] 1 [x1] 2 [x2] 66 [cc] 93 94 95 97 110
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; rd  in  	(15) 0[3],29[126],31[133],64[262],65[263],66[266],93[371],94[372,373],95[374,375],97[376,377],103[382],110[384]
;; rd  gen 	(7) 0[3],66[266],93[371],94[373],95[374],97[376],110[384]
;; rd  kill	(33) 0[0,1,2,3,4,5,6,7,8,9,10],30[127,128,129,130,131,132],66[264,265,266,267,268,269,270,271],93[371],94[372,373],95[374,375],97[376,377],110[384]
;;  UD chains for artificial uses at top
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 94 95 97 103
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap] 94 95 97 103
;; rd  out 	(8) 29[126],31[133],64[262],65[263],94[373],95[374],97[376],103[382]
;;  UD chains for artificial uses at bottom
;;   reg 29 { d126(bb 0 insn -1) }
;;   reg 31 { d133(bb 0 insn -1) }
;;   reg 64 { d262(bb 0 insn -1) }
;;   reg 65 { d263(bb 0 insn -1) }

( 2 4 )->[5]->( 7 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(29){ d126(bb 0 insn -1) }u-1(31){ d133(bb 0 insn -1) }u-1(64){ d262(bb 0 insn -1) }u-1(65){ d263(bb 0 insn -1) }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 66 [cc] 112
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 66 [cc] 112
;; live  kill	
;; rd  in  	(8) 29[126],31[133],64[262],65[263],94[373],95[374],97[376],103[382]
;; rd  gen 	(2) 66[265],112[385]
;; rd  kill	(9) 66[264,265,266,267,268,269,270,271],112[385]
;;  UD chains for artificial uses at top
;; lr  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; rd  out 	(4) 29[126],31[133],64[262],65[263]
;;  UD chains for artificial uses at bottom
;;   reg 29 { d126(bb 0 insn -1) }
;;   reg 31 { d133(bb 0 insn -1) }
;;   reg 64 { d262(bb 0 insn -1) }
;;   reg 65 { d263(bb 0 insn -1) }

( 5 )->[6]->( )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(29){ d126(bb 0 insn -1) }u-1(31){ d133(bb 0 insn -1) }u-1(64){ d262(bb 0 insn -1) }u-1(65){ d263(bb 0 insn -1) }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 67 [vg] 68 [p0] 69 [p1] 70 [p2] 71 [p3] 72 [p4] 73 [p5] 74 [p6] 75 [p7] 76 [p8] 77 [p9] 78 [p10] 79 [p11] 80 [p12] 81 [p13] 82 [p14] 83 [p15] 84 [ffr] 85 [ffrt]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	
;; live  kill	 16 [x16] 17 [x17] 30 [x30]
;; rd  in  	(4) 29[126],31[133],64[262],65[263]
;; rd  gen 	(0) 
;; rd  kill	(6) 30[127,128,129,130,131,132]
;;  UD chains for artificial uses at top
;; lr  out 	 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 31 [sp] 64 [sfp] 65 [ap]
;; rd  out 	(3) 31[133],64[262],65[263]
;;  UD chains for artificial uses at bottom
;;   reg 29 { d126(bb 0 insn -1) }
;;   reg 31 { d133(bb 0 insn -1) }
;;   reg 64 { d262(bb 0 insn -1) }
;;   reg 65 { d263(bb 0 insn -1) }

( 5 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(29){ d126(bb 0 insn -1) }u-1(31){ d133(bb 0 insn -1) }u-1(64){ d262(bb 0 insn -1) }u-1(65){ d263(bb 0 insn -1) }}
;; lr  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  use 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; lr  def 	 0 [x0]
;; live  in  	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  gen 	 0 [x0]
;; live  kill	
;; rd  in  	(4) 29[126],31[133],64[262],65[263]
;; rd  gen 	(1) 0[1]
;; rd  kill	(11) 0[0,1,2,3,4,5,6,7,8,9,10]
;;  UD chains for artificial uses at top
;; lr  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; live  out 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;; rd  out 	(5) 0[1],29[126],31[133],64[262],65[263]
;;  UD chains for artificial uses at bottom
;;   reg 29 { d126(bb 0 insn -1) }
;;   reg 31 { d133(bb 0 insn -1) }
;;   reg 64 { d262(bb 0 insn -1) }
;;   reg 65 { d263(bb 0 insn -1) }

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ d1(bb 7 insn 60) }u-1(29){ d126(bb 0 insn -1) }u-1(31){ d133(bb 0 insn -1) }u-1(64){ d262(bb 0 insn -1) }}
;; lr  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; lr  use 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; lr  def 	
;; live  in  	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(5) 0[1],29[126],31[133],64[262],65[263]
;; rd  gen 	(0) 
;; rd  kill	(0) 
;;  UD chains for artificial uses at top
;; lr  out 	
;; live  out 	
;; rd  out 	(0) 
;;  UD chains for artificial uses at bottom
;;   reg 0 { d1(bb 7 insn 60) }
;;   reg 29 { d126(bb 0 insn -1) }
;;   reg 31 { d133(bb 0 insn -1) }
;;   reg 64 { d262(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 32 to worklist
  Adding insn 27 to worklist
  Adding insn 21 to worklist
  Adding insn 15 to worklist
  Adding insn 4 to worklist
  Adding insn 47 to worklist
  Adding insn 41 to worklist
  Adding insn 56 to worklist
  Adding insn 55 to worklist
  Adding insn 57 to worklist
  Adding insn 61 to worklist
Finished finding needed instructions:
  Adding insn 60 to worklist
Processing use of (reg 0 x0) in insn 61:
Processing use of (reg 31 sp) in insn 57:
Processing use of (reg 64 sfp) in insn 55:
Processing use of (reg 112) in insn 55:
  Adding insn 54 to worklist
Processing use of (reg 66 cc) in insn 56:
Processing use of (reg 31 sp) in insn 41:
Processing use of (reg 0 x0) in insn 41:
  Adding insn 82 to worklist
Processing use of (reg 1 x1) in insn 41:
  Adding insn 39 to worklist
Processing use of (reg 2 x2) in insn 41:
  Adding insn 38 to worklist
Processing use of (reg 94 [ b ]) in insn 38:
  Adding insn 35 to worklist
Processing use of (reg 94 [ b ]) in insn 35:
  Adding insn 6 to worklist
Processing use of (reg 97 [ a ]) in insn 35:
  Adding insn 7 to worklist
  Adding insn 43 to worklist
Processing use of (reg 93 [ b ]) in insn 43:
  Adding insn 34 to worklist
Processing use of (reg 94 [ b ]) in insn 34:
Processing use of (reg 95 [ i ]) in insn 6:
  Adding insn 5 to worklist
Processing use of (reg 103) in insn 39:
  Adding insn 17 to worklist
Processing use of (reg 113) in insn 17:
  Adding insn 16 to worklist
Processing use of (reg 66 cc) in insn 47:
  Adding insn 46 to worklist
Processing use of (reg 95 [ i ]) in insn 46:
  Adding insn 42 to worklist
Processing use of (reg 110 [ n ]) in insn 46:
  Adding insn 45 to worklist
Processing use of (reg 64 sfp) in insn 45:
Processing use of (reg 95 [ i ]) in insn 42:
Processing use of (reg 64 sfp) in insn 4:
Processing use of (reg 99) in insn 4:
  Adding insn 3 to worklist
Processing use of (reg 31 sp) in insn 15:
Processing use of (reg 0 x0) in insn 15:
  Adding insn 14 to worklist
Processing use of (reg 1 x1) in insn 15:
  Adding insn 13 to worklist
Processing use of (reg 100) in insn 13:
  Adding insn 10 to worklist
Processing use of (reg 64 sfp) in insn 10:
Processing use of (reg 101) in insn 14:
  Adding insn 12 to worklist
Processing use of (reg 102) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 31 sp) in insn 21:
Processing use of (reg 0 x0) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 1 x1) in insn 21:
  Adding insn 19 to worklist
Processing use of (reg 2 x2) in insn 21:
  Adding insn 18 to worklist
Processing use of (reg 103) in insn 19:
Processing use of (reg 31 sp) in insn 27:
Processing use of (reg 0 x0) in insn 27:
  Adding insn 26 to worklist
Processing use of (reg 1 x1) in insn 27:
  Adding insn 25 to worklist
Processing use of (reg 2 x2) in insn 27:
  Adding insn 24 to worklist
Processing use of (reg 103) in insn 25:
Processing use of (reg 66 cc) in insn 32:
  Adding insn 31 to worklist
Processing use of (reg 107 [ n ]) in insn 31:
  Adding insn 30 to worklist
Processing use of (reg 64 sfp) in insn 30:
starting the processing of deferred insns
ending the processing of deferred insns


main

Dataflow summary:
;;  fully invalidated by EH 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 9 [x9] 10 [x10] 11 [x11] 12 [x12] 13 [x13] 14 [x14] 15 [x15] 16 [x16] 17 [x17] 18 [x18] 30 [x30] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 48 [v16] 49 [v17] 50 [v18] 51 [v19] 52 [v20] 53 [v21] 54 [v22] 55 [v23] 56 [v24] 57 [v25] 58 [v26] 59 [v27] 60 [v28] 61 [v29] 62 [v30] 63 [v31] 66 [cc] 67 [vg] 68 [p0] 69 [p1] 70 [p2] 71 [p3] 72 [p4] 73 [p5] 74 [p6] 75 [p7] 76 [p8] 77 [p9] 78 [p10] 79 [p11] 80 [p12] 81 [p13] 82 [p14] 83 [p15] 84 [ffr] 85 [ffrt]
;;  hardware regs used 	 31 [sp] 64 [sfp] 65 [ap]
;;  regular block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  eh block artificial uses 	 29 [x29] 31 [sp] 64 [sfp] 65 [ap]
;;  entry block defs 	 0 [x0] 1 [x1] 2 [x2] 3 [x3] 4 [x4] 5 [x5] 6 [x6] 7 [x7] 8 [x8] 29 [x29] 30 [x30] 31 [sp] 32 [v0] 33 [v1] 34 [v2] 35 [v3] 36 [v4] 37 [v5] 38 [v6] 39 [v7] 64 [sfp] 65 [ap] 68 [p0] 69 [p1] 70 [p2] 71 [p3]
;;  exit block uses 	 0 [x0] 29 [x29] 31 [sp] 64 [sfp]
;;  regs ever live 	 0 [x0] 1 [x1] 2 [x2] 16 [x16] 17 [x17] 30 [x30] 31 [sp] 66 [cc]
;;  ref usage 	r0={11d,6u} r1={10d,4u} r2={9d,3u} r3={6d} r4={6d} r5={6d} r6={6d} r7={6d} r8={6d} r9={5d} r10={5d} r11={5d} r12={5d} r13={5d} r14={5d} r15={5d} r16={10d} r17={10d} r18={5d} r29={1d,7u} r30={6d} r31={1d,12u} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={1d,12u,1e} r65={1d,6u} r66={8d,3u} r67={5d} r68={6d} r69={6d} r70={6d} r71={6d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r93={1d,1u} r94={2d,3u} r95={2d,3u} r97={2d,1u} r99={1d,1u} r100={1d,1u} r101={1d,1u} r102={1d,1u} r103={1d,3u} r107={1d,1u} r110={1d,1u} r112={1d,1u} r113={1d,1u} 
;;    total ref usage 460{387d,72u,1e} in 41{36 regular + 5 call} insns.
(note 8 0 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)
(note 2 8 3 2 NOTE_INSN_FUNCTION_BEG)
(insn 3 2 4 2 (set (reg/f:DI 99)
        (const:DI (unspec:DI [
                    (symbol_ref:DI ("__stack_chk_guard") [flags 0xc0]  <var_decl 0x7749fe9ccb40 __stack_chk_guard>)
                    (const_int 0 [0])
                ] UNSPEC_SALT_ADDR))) "fib.c":7:12 65 {*movdi_aarch64}
     (nil))
(insn 4 3 10 2 (parallel [
            (set (mem/v/f/c:DI (plus:DI (reg/f:DI 64 sfp)
                        (const_int -8 [0xfffffffffffffff8])) [2 D.5063+0 S8 A64])
                (unspec:DI [
                        (mem:DI (reg/f:DI 99) [0  S8 A8])
                    ] UNSPEC_SP_SET))
            (set (scratch:DI)
                (const_int 0 [0]))
        ]) "fib.c":7:12 1162 {stack_protect_set_di}
     (expr_list:REG_DEAD (reg/f:DI 99)
        (nil)))
(insn 10 4 11 2 (set (reg/f:DI 100)
        (plus:DI (reg/f:DI 64 sfp)
            (const_int -12 [0xfffffffffffffff4]))) "fib.c":12:5 157 {*adddi3_aarch64}
     (nil))
(insn 11 10 12 2 (set (reg/f:DI 102)
        (high:DI (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7749fe9ccbd0 *.LC0>))) "fib.c":12:5 65 {*movdi_aarch64}
     (nil))
(insn 12 11 13 2 (set (reg/f:DI 101)
        (lo_sum:DI (reg/f:DI 102)
            (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7749fe9ccbd0 *.LC0>))) "fib.c":12:5 1116 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 102)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7749fe9ccbd0 *.LC0>)
            (nil))))
(insn 13 12 14 2 (set (reg:DI 1 x1)
        (reg/f:DI 100)) "fib.c":12:5 65 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 100)
        (expr_list:REG_EQUAL (plus:DI (reg/f:DI 64 sfp)
                (const_int -12 [0xfffffffffffffff4]))
            (nil))))
(insn 14 13 15 2 (set (reg:DI 0 x0)
        (reg/f:DI 101)) "fib.c":12:5 65 {*movdi_aarch64}
     (expr_list:REG_DEAD (reg/f:DI 101)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC0") [flags 0x82]  <var_decl 0x7749fe9ccbd0 *.LC0>)
            (nil))))
(call_insn 15 14 16 2 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7749feb2b000 scanf>) [0 __builtin_scanf S8 A8])
                    (const_int 0 [0])))
            (unspec:DI [
                    (const_int 0 [0])
                ] UNSPEC_CALLEE_ABI)
            (clobber (reg:DI 30 x30))
        ]) "fib.c":12:5 59 {*call_value_insn}
     (expr_list:REG_DEAD (reg:DI 1 x1)
        (expr_list:REG_UNUSED (reg:SI 0 x0)
            (expr_list:REG_CALL_DECL (symbol_ref:DI ("*__isoc99_scanf") [flags 0x41]  <function_decl 0x7749feb2b000 scanf>)
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:DI (use (reg:DI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (nil))))))
(insn 16 15 17 2 (set (reg/f:DI 113)
        (high:DI (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>))) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 65 {*movdi_aarch64}
     (nil))
(insn 17 16 18 2 (set (reg/f:DI 103)
        (lo_sum:DI (reg/f:DI 113)
            (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>))) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 1116 {add_losym_di}
     (expr_list:REG_DEAD (reg/f:DI 113)
        (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>)
            (nil))))
(insn 18 17 19 2 (set (reg:SI 2 x2)
        (const_int 0 [0])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(insn 19 18 20 2 (set (reg:DI 1 x1)
        (reg/f:DI 103)) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 65 {*movdi_aarch64}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>)
        (nil)))
(insn 20 19 21 2 (set (reg:SI 0 x0)
        (const_int 2 [0x2])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(call_insn 21 20 24 2 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>) [0 __builtin___printf_chk S8 A8])
                    (const_int 0 [0])))
            (unspec:DI [
                    (const_int 0 [0])
                ] UNSPEC_CALLEE_ABI)
            (clobber (reg:DI 30 x30))
        ]) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 59 {*call_value_insn}
     (expr_list:REG_DEAD (reg:SI 2 x2)
        (expr_list:REG_DEAD (reg:DI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (nil)))))))
(insn 24 21 25 2 (set (reg:SI 2 x2)
        (const_int 1 [0x1])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(insn 25 24 26 2 (set (reg:DI 1 x1)
        (reg/f:DI 103)) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 65 {*movdi_aarch64}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>)
        (nil)))
(insn 26 25 27 2 (set (reg:SI 0 x0)
        (const_int 2 [0x2])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(call_insn 27 26 30 2 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>) [0 __builtin___printf_chk S8 A8])
                    (const_int 0 [0])))
            (unspec:DI [
                    (const_int 0 [0])
                ] UNSPEC_CALLEE_ABI)
            (clobber (reg:DI 30 x30))
        ]) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 59 {*call_value_insn}
     (expr_list:REG_DEAD (reg:SI 2 x2)
        (expr_list:REG_DEAD (reg:DI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (nil)))))))
(insn 30 27 31 2 (set (reg:SI 107 [ n ])
        (mem/c:SI (plus:DI (reg/f:DI 64 sfp)
                (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])) "fib.c":15:14 64 {*movsi_aarch64}
     (nil))
(insn 31 30 32 2 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 107 [ n ])
            (const_int 1 [0x1]))) "fib.c":15:14 441 {cmpsi}
     (expr_list:REG_DEAD (reg:SI 107 [ n ])
        (nil)))
(jump_insn 32 31 63 2 (set (pc)
        (if_then_else (le (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 48)
            (pc))) "fib.c":15:14 15 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 118111604 (nil)))
 -> 48)
(note 63 32 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)
(insn 5 63 6 3 (set (reg/v:SI 95 [ i ])
        (const_int 1 [0x1])) "fib.c":11:7 64 {*movsi_aarch64}
     (nil))
(insn 6 5 7 3 (set (reg/v:SI 94 [ b ])
        (reg/v:SI 95 [ i ])) "fib.c":10:7 64 {*movsi_aarch64}
     (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
(insn 7 6 44 3 (set (reg/v:SI 97 [ a ])
        (const_int 0 [0])) "fib.c":9:7 64 {*movsi_aarch64}
     (nil))
(code_label 44 7 33 4 3 (nil) [1 uses])
(note 33 44 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
(insn 34 33 35 4 (set (reg/v:SI 93 [ b ])
        (reg/v:SI 94 [ b ])) 64 {*movsi_aarch64}
     (nil))
(insn 35 34 38 4 (set (reg/v:SI 94 [ b ])
        (plus:SI (reg/v:SI 94 [ b ])
            (reg/v:SI 97 [ a ]))) "fib.c":17:11 156 {*addsi3_aarch64}
     (expr_list:REG_DEAD (reg/v:SI 97 [ a ])
        (nil)))
(insn 38 35 39 4 (set (reg:SI 2 x2)
        (reg/v:SI 94 [ b ])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(insn 39 38 82 4 (set (reg:DI 1 x1)
        (reg/f:DI 103)) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 65 {*movdi_aarch64}
     (expr_list:REG_EQUAL (symbol_ref/f:DI ("*.LC1") [flags 0x82]  <var_decl 0x7749fe9ccc60 *.LC1>)
        (nil)))
(insn 82 39 41 4 (set (reg:SI 0 x0)
        (const_int 2 [0x2])) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 64 {*movsi_aarch64}
     (nil))
(call_insn 41 82 42 4 (parallel [
            (set (reg:SI 0 x0)
                (call (mem:DI (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>) [0 __builtin___printf_chk S8 A8])
                    (const_int 0 [0])))
            (unspec:DI [
                    (const_int 0 [0])
                ] UNSPEC_CALLEE_ABI)
            (clobber (reg:DI 30 x30))
        ]) "/usr/aarch64-linux-gnu/include/bits/stdio2.h":86:10 59 {*call_value_insn}
     (expr_list:REG_DEAD (reg:SI 2 x2)
        (expr_list:REG_DEAD (reg:DI 1 x1)
            (expr_list:REG_UNUSED (reg:SI 0 x0)
                (expr_list:REG_CALL_DECL (symbol_ref:DI ("__printf_chk") [flags 0x41]  <function_decl 0x7749feb54200 __printf_chk>)
                    (nil)))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (expr_list:SI (use (reg:SI 0 x0))
                (expr_list:DI (use (reg:DI 1 x1))
                    (expr_list:SI (use (reg:SI 2 x2))
                        (nil)))))))
(insn 42 41 43 4 (set (reg/v:SI 95 [ i ])
        (plus:SI (reg/v:SI 95 [ i ])
            (const_int 1 [0x1]))) "fib.c":20:11 156 {*addsi3_aarch64}
     (nil))
(insn 43 42 45 4 (set (reg/v:SI 97 [ a ])
        (reg/v:SI 93 [ b ])) 64 {*movsi_aarch64}
     (expr_list:REG_DEAD (reg/v:SI 93 [ b ])
        (nil)))
(insn 45 43 46 4 (set (reg:SI 110 [ n ])
        (mem/c:SI (plus:DI (reg/f:DI 64 sfp)
                (const_int -12 [0xfffffffffffffff4])) [1 n+0 S4 A32])) "fib.c":15:14 64 {*movsi_aarch64}
     (nil))
(insn 46 45 47 4 (set (reg:CC 66 cc)
        (compare:CC (reg:SI 110 [ n ])
            (reg/v:SI 95 [ i ]))) "fib.c":15:14 441 {cmpsi}
     (expr_list:REG_DEAD (reg:SI 110 [ n ])
        (nil)))
(jump_insn 47 46 48 4 (set (pc)
        (if_then_else (gt (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref:DI 44)
            (pc))) "fib.c":15:14 15 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 955630228 (nil)))
 -> 44)
(code_label 48 47 49 5 2 (nil) [1 uses])
(note 49 48 54 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
(insn 54 49 55 5 (set (reg/f:DI 112)
        (const:DI (unspec:DI [
                    (symbol_ref:DI ("__stack_chk_guard") [flags 0xc0]  <var_decl 0x7749fe9ccb40 __stack_chk_guard>)
                    (const_int 1 [0x1])
                ] UNSPEC_SALT_ADDR))) "fib.c":23:1 65 {*movdi_aarch64}
     (nil))
(insn 55 54 56 5 (parallel [
            (set (reg:CC 66 cc)
                (unspec:CC [
                        (mem/v/f/c:DI (plus:DI (reg/f:DI 64 sfp)
                                (const_int -8 [0xfffffffffffffff8])) [2 D.5063+0 S8 A64])
                        (mem:DI (reg/f:DI 112) [0  S8 A8])
                    ] UNSPEC_SP_TEST))
            (clobber (scratch:DI))
            (clobber (scratch:DI))
        ]) "fib.c":23:1 1164 {stack_protect_test_di}
     (expr_list:REG_DEAD (reg/f:DI 112)
        (nil)))
(jump_insn 56 55 64 5 (set (pc)
        (if_then_else (eq (reg:CC 66 cc)
                (const_int 0 [0]))
            (label_ref 59)
            (pc))) "fib.c":23:1 15 {condjump}
     (expr_list:REG_DEAD (reg:CC 66 cc)
        (int_list:REG_BR_PROB 1073312332 (nil)))
 -> 59)
(note 64 56 57 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
(call_insn 57 64 59 6 (parallel [
            (call (mem:DI (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7749fe9c8e00 __stack_chk_fail>) [0 __stack_chk_fail S8 A8])
                (const_int 0 [0]))
            (unspec:DI [
                    (const_int 0 [0])
                ] UNSPEC_CALLEE_ABI)
            (clobber (reg:DI 30 x30))
        ]) "fib.c":23:1 58 {*call_insn}
     (expr_list:REG_CALL_DECL (symbol_ref:DI ("__stack_chk_fail") [flags 0x41]  <function_decl 0x7749fe9c8e00 __stack_chk_fail>)
        (expr_list:REG_NORETURN (const_int 0 [0])
            (expr_list:REG_EH_REGION (const_int 0 [0])
                (nil))))
    (expr_list (clobber (reg:DI 17 x17))
        (expr_list (clobber (reg:DI 16 x16))
            (nil))))
(code_label 59 57 65 7 4 (nil) [1 uses])
(note 65 59 60 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
(insn 60 65 61 7 (set (reg/i:SI 0 x0)
        (const_int 0 [0])) "fib.c":23:1 64 {*movsi_aarch64}
     (nil))
(insn 61 60 0 7 (use (reg/i:SI 0 x0)) "fib.c":23:1 -1
     (nil))
